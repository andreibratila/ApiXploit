/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ResultsImport } from './routes/results'
import { Route as IndexImport } from './routes/index'
import { Route as ConfigurationStatsImport } from './routes/configuration/stats'
import { Route as ConfigurationLogImport } from './routes/configuration/log'
import { Route as ConfigurationDocumentationImport } from './routes/configuration/documentation'
import { Route as ConfigurationConnectivityImport } from './routes/configuration/connectivity'
import { Route as ConfigurationDictionaryDictionaryNavbarImport } from './routes/configuration/dictionary/_dictionaryNavbar'
import { Route as ConfigurationDictionaryDictionaryNavbarDocumentImport } from './routes/configuration/dictionary/_dictionaryNavbar/$document'

// Create Virtual Routes

const ConfigurationDictionaryImport = createFileRoute(
  '/configuration/dictionary',
)()

// Create/Update Routes

const ResultsRoute = ResultsImport.update({
  id: '/results',
  path: '/results',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ConfigurationDictionaryRoute = ConfigurationDictionaryImport.update({
  id: '/configuration/dictionary',
  path: '/configuration/dictionary',
  getParentRoute: () => rootRoute,
} as any)

const ConfigurationStatsRoute = ConfigurationStatsImport.update({
  id: '/configuration/stats',
  path: '/configuration/stats',
  getParentRoute: () => rootRoute,
} as any)

const ConfigurationLogRoute = ConfigurationLogImport.update({
  id: '/configuration/log',
  path: '/configuration/log',
  getParentRoute: () => rootRoute,
} as any)

const ConfigurationDocumentationRoute = ConfigurationDocumentationImport.update(
  {
    id: '/configuration/documentation',
    path: '/configuration/documentation',
    getParentRoute: () => rootRoute,
  } as any,
)

const ConfigurationConnectivityRoute = ConfigurationConnectivityImport.update({
  id: '/configuration/connectivity',
  path: '/configuration/connectivity',
  getParentRoute: () => rootRoute,
} as any)

const ConfigurationDictionaryDictionaryNavbarRoute =
  ConfigurationDictionaryDictionaryNavbarImport.update({
    id: '/_dictionaryNavbar',
    getParentRoute: () => ConfigurationDictionaryRoute,
  } as any)

const ConfigurationDictionaryDictionaryNavbarDocumentRoute =
  ConfigurationDictionaryDictionaryNavbarDocumentImport.update({
    id: '/$document',
    path: '/$document',
    getParentRoute: () => ConfigurationDictionaryDictionaryNavbarRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/results': {
      id: '/results'
      path: '/results'
      fullPath: '/results'
      preLoaderRoute: typeof ResultsImport
      parentRoute: typeof rootRoute
    }
    '/configuration/connectivity': {
      id: '/configuration/connectivity'
      path: '/configuration/connectivity'
      fullPath: '/configuration/connectivity'
      preLoaderRoute: typeof ConfigurationConnectivityImport
      parentRoute: typeof rootRoute
    }
    '/configuration/documentation': {
      id: '/configuration/documentation'
      path: '/configuration/documentation'
      fullPath: '/configuration/documentation'
      preLoaderRoute: typeof ConfigurationDocumentationImport
      parentRoute: typeof rootRoute
    }
    '/configuration/log': {
      id: '/configuration/log'
      path: '/configuration/log'
      fullPath: '/configuration/log'
      preLoaderRoute: typeof ConfigurationLogImport
      parentRoute: typeof rootRoute
    }
    '/configuration/stats': {
      id: '/configuration/stats'
      path: '/configuration/stats'
      fullPath: '/configuration/stats'
      preLoaderRoute: typeof ConfigurationStatsImport
      parentRoute: typeof rootRoute
    }
    '/configuration/dictionary': {
      id: '/configuration/dictionary'
      path: '/configuration/dictionary'
      fullPath: '/configuration/dictionary'
      preLoaderRoute: typeof ConfigurationDictionaryImport
      parentRoute: typeof rootRoute
    }
    '/configuration/dictionary/_dictionaryNavbar': {
      id: '/configuration/dictionary/_dictionaryNavbar'
      path: '/configuration/dictionary'
      fullPath: '/configuration/dictionary'
      preLoaderRoute: typeof ConfigurationDictionaryDictionaryNavbarImport
      parentRoute: typeof ConfigurationDictionaryRoute
    }
    '/configuration/dictionary/_dictionaryNavbar/$document': {
      id: '/configuration/dictionary/_dictionaryNavbar/$document'
      path: '/$document'
      fullPath: '/configuration/dictionary/$document'
      preLoaderRoute: typeof ConfigurationDictionaryDictionaryNavbarDocumentImport
      parentRoute: typeof ConfigurationDictionaryDictionaryNavbarImport
    }
  }
}

// Create and export the route tree

interface ConfigurationDictionaryDictionaryNavbarRouteChildren {
  ConfigurationDictionaryDictionaryNavbarDocumentRoute: typeof ConfigurationDictionaryDictionaryNavbarDocumentRoute
}

const ConfigurationDictionaryDictionaryNavbarRouteChildren: ConfigurationDictionaryDictionaryNavbarRouteChildren =
  {
    ConfigurationDictionaryDictionaryNavbarDocumentRoute:
      ConfigurationDictionaryDictionaryNavbarDocumentRoute,
  }

const ConfigurationDictionaryDictionaryNavbarRouteWithChildren =
  ConfigurationDictionaryDictionaryNavbarRoute._addFileChildren(
    ConfigurationDictionaryDictionaryNavbarRouteChildren,
  )

interface ConfigurationDictionaryRouteChildren {
  ConfigurationDictionaryDictionaryNavbarRoute: typeof ConfigurationDictionaryDictionaryNavbarRouteWithChildren
}

const ConfigurationDictionaryRouteChildren: ConfigurationDictionaryRouteChildren =
  {
    ConfigurationDictionaryDictionaryNavbarRoute:
      ConfigurationDictionaryDictionaryNavbarRouteWithChildren,
  }

const ConfigurationDictionaryRouteWithChildren =
  ConfigurationDictionaryRoute._addFileChildren(
    ConfigurationDictionaryRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/results': typeof ResultsRoute
  '/configuration/connectivity': typeof ConfigurationConnectivityRoute
  '/configuration/documentation': typeof ConfigurationDocumentationRoute
  '/configuration/log': typeof ConfigurationLogRoute
  '/configuration/stats': typeof ConfigurationStatsRoute
  '/configuration/dictionary': typeof ConfigurationDictionaryDictionaryNavbarRouteWithChildren
  '/configuration/dictionary/$document': typeof ConfigurationDictionaryDictionaryNavbarDocumentRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/results': typeof ResultsRoute
  '/configuration/connectivity': typeof ConfigurationConnectivityRoute
  '/configuration/documentation': typeof ConfigurationDocumentationRoute
  '/configuration/log': typeof ConfigurationLogRoute
  '/configuration/stats': typeof ConfigurationStatsRoute
  '/configuration/dictionary': typeof ConfigurationDictionaryDictionaryNavbarRouteWithChildren
  '/configuration/dictionary/$document': typeof ConfigurationDictionaryDictionaryNavbarDocumentRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/results': typeof ResultsRoute
  '/configuration/connectivity': typeof ConfigurationConnectivityRoute
  '/configuration/documentation': typeof ConfigurationDocumentationRoute
  '/configuration/log': typeof ConfigurationLogRoute
  '/configuration/stats': typeof ConfigurationStatsRoute
  '/configuration/dictionary': typeof ConfigurationDictionaryRouteWithChildren
  '/configuration/dictionary/_dictionaryNavbar': typeof ConfigurationDictionaryDictionaryNavbarRouteWithChildren
  '/configuration/dictionary/_dictionaryNavbar/$document': typeof ConfigurationDictionaryDictionaryNavbarDocumentRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/results'
    | '/configuration/connectivity'
    | '/configuration/documentation'
    | '/configuration/log'
    | '/configuration/stats'
    | '/configuration/dictionary'
    | '/configuration/dictionary/$document'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/results'
    | '/configuration/connectivity'
    | '/configuration/documentation'
    | '/configuration/log'
    | '/configuration/stats'
    | '/configuration/dictionary'
    | '/configuration/dictionary/$document'
  id:
    | '__root__'
    | '/'
    | '/results'
    | '/configuration/connectivity'
    | '/configuration/documentation'
    | '/configuration/log'
    | '/configuration/stats'
    | '/configuration/dictionary'
    | '/configuration/dictionary/_dictionaryNavbar'
    | '/configuration/dictionary/_dictionaryNavbar/$document'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ResultsRoute: typeof ResultsRoute
  ConfigurationConnectivityRoute: typeof ConfigurationConnectivityRoute
  ConfigurationDocumentationRoute: typeof ConfigurationDocumentationRoute
  ConfigurationLogRoute: typeof ConfigurationLogRoute
  ConfigurationStatsRoute: typeof ConfigurationStatsRoute
  ConfigurationDictionaryRoute: typeof ConfigurationDictionaryRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ResultsRoute: ResultsRoute,
  ConfigurationConnectivityRoute: ConfigurationConnectivityRoute,
  ConfigurationDocumentationRoute: ConfigurationDocumentationRoute,
  ConfigurationLogRoute: ConfigurationLogRoute,
  ConfigurationStatsRoute: ConfigurationStatsRoute,
  ConfigurationDictionaryRoute: ConfigurationDictionaryRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/results",
        "/configuration/connectivity",
        "/configuration/documentation",
        "/configuration/log",
        "/configuration/stats",
        "/configuration/dictionary"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/results": {
      "filePath": "results.tsx"
    },
    "/configuration/connectivity": {
      "filePath": "configuration/connectivity.tsx"
    },
    "/configuration/documentation": {
      "filePath": "configuration/documentation.tsx"
    },
    "/configuration/log": {
      "filePath": "configuration/log.tsx"
    },
    "/configuration/stats": {
      "filePath": "configuration/stats.tsx"
    },
    "/configuration/dictionary": {
      "filePath": "configuration/dictionary",
      "children": [
        "/configuration/dictionary/_dictionaryNavbar"
      ]
    },
    "/configuration/dictionary/_dictionaryNavbar": {
      "filePath": "configuration/dictionary/_dictionaryNavbar.tsx",
      "parent": "/configuration/dictionary",
      "children": [
        "/configuration/dictionary/_dictionaryNavbar/$document"
      ]
    },
    "/configuration/dictionary/_dictionaryNavbar/$document": {
      "filePath": "configuration/dictionary/_dictionaryNavbar/$document.tsx",
      "parent": "/configuration/dictionary/_dictionaryNavbar"
    }
  }
}
ROUTE_MANIFEST_END */
